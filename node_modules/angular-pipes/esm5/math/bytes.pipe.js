import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { isNumberFinite, isPositive, isInteger, toDecimal } from '../utils/utils';
var BytesPipe = /** @class */ (function () {
    function BytesPipe() {
    }
    BytesPipe_1 = BytesPipe;
    BytesPipe.prototype.transform = function (input, decimal, from, to) {
        if (decimal === void 0) { decimal = 0; }
        if (from === void 0) { from = 'B'; }
        if (!(isNumberFinite(input) &&
            isNumberFinite(decimal) &&
            isInteger(decimal) &&
            isPositive(decimal))) {
            return input;
        }
        var bytes = input;
        var unit = from;
        while (unit !== 'B') {
            bytes *= 1024;
            unit = BytesPipe_1.formats[unit].prev;
        }
        if (to) {
            var format = BytesPipe_1.formats[to];
            var result = toDecimal(BytesPipe_1.calculateResult(format, bytes), decimal);
            return BytesPipe_1.formatResult(result, to);
        }
        for (var key in BytesPipe_1.formats) {
            if (BytesPipe_1.formats.hasOwnProperty(key)) {
                var format = BytesPipe_1.formats[key];
                if (bytes < format.max) {
                    var result = toDecimal(BytesPipe_1.calculateResult(format, bytes), decimal);
                    return BytesPipe_1.formatResult(result, key);
                }
            }
        }
    };
    BytesPipe.formatResult = function (result, unit) {
        return result + " " + unit;
    };
    BytesPipe.calculateResult = function (format, bytes) {
        var prev = format.prev ? BytesPipe_1.formats[format.prev] : undefined;
        return prev ? bytes / prev.max : bytes;
    };
    var BytesPipe_1;
    BytesPipe.formats = {
        'B': { max: 1024 },
        'kB': { max: Math.pow(1024, 2), prev: 'B' },
        'KB': { max: Math.pow(1024, 2), prev: 'B' },
        'MB': { max: Math.pow(1024, 3), prev: 'kB' },
        'GB': { max: Math.pow(1024, 4), prev: 'MB' },
        'TB': { max: Number.MAX_SAFE_INTEGER, prev: 'GB' }
    };
    BytesPipe = BytesPipe_1 = tslib_1.__decorate([
        Pipe({
            name: 'bytes'
        })
    ], BytesPipe);
    return BytesPipe;
}());
export { BytesPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnl0ZXMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJtYXRoL2J5dGVzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVFsRjtJQUFBO0lBeURBLENBQUM7a0JBekRZLFNBQVM7SUFZbEIsNkJBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxPQUFtQixFQUFFLElBQW9CLEVBQUUsRUFBYTtRQUF4RCx3QkFBQSxFQUFBLFdBQW1CO1FBQUUscUJBQUEsRUFBQSxVQUFvQjtRQUUzRCxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDO1lBQ25CLGNBQWMsQ0FBQyxPQUFPLENBQUM7WUFDdkIsU0FBUyxDQUFDLE9BQU8sQ0FBQztZQUNsQixVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRTtZQUMxQixPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUVELElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsT0FBTyxJQUFJLEtBQUssR0FBRyxFQUFFO1lBQ2pCLEtBQUssSUFBSSxJQUFJLENBQUM7WUFDZCxJQUFJLEdBQUcsV0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFLLENBQUM7U0FDeEM7UUFFRCxJQUFJLEVBQUUsRUFBRTtZQUNKLElBQU0sTUFBTSxHQUFHLFdBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFckMsSUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFdBQVMsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRTVFLE9BQU8sV0FBUyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDN0M7UUFFRCxLQUFLLElBQU0sR0FBRyxJQUFJLFdBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDakMsSUFBSSxXQUFTLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDdkMsSUFBTSxNQUFNLEdBQUcsV0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsRUFBRTtvQkFFcEIsSUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFdBQVMsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO29CQUU1RSxPQUFPLFdBQVMsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2lCQUM5QzthQUNKO1NBQ0o7SUFDTCxDQUFDO0lBRU0sc0JBQVksR0FBbkIsVUFBb0IsTUFBYyxFQUFFLElBQVk7UUFDNUMsT0FBVSxNQUFNLFNBQUksSUFBTSxDQUFDO0lBQy9CLENBQUM7SUFFTSx5QkFBZSxHQUF0QixVQUF1QixNQUF3QyxFQUFFLEtBQWE7UUFDMUUsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUN0RSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMzQyxDQUFDOztJQXRETSxpQkFBTyxHQUF3RDtRQUNsRSxHQUFHLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFDO1FBQ2hCLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFDO1FBQ3pDLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFDO1FBQ3pDLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDO1FBQzFDLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDO1FBQzFDLElBQUksRUFBRSxFQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQztLQUNuRCxDQUFDO0lBVE8sU0FBUztRQUhyQixJQUFJLENBQUM7WUFDRixJQUFJLEVBQUUsT0FBTztTQUNoQixDQUFDO09BQ1csU0FBUyxDQXlEckI7SUFBRCxnQkFBQztDQUFBLEFBekRELElBeURDO1NBekRZLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzTnVtYmVyRmluaXRlLCBpc1Bvc2l0aXZlLCBpc0ludGVnZXIsIHRvRGVjaW1hbCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbmV4cG9ydCB0eXBlIEJ5dGVVbml0ID0gJ0InIHwgJ2tCJyB8ICdLQicgfCAnTUInIHwgJ0dCJyB8ICdUQic7XHJcblxyXG5cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ2J5dGVzJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQnl0ZXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gICAgc3RhdGljIGZvcm1hdHM6IHsgW2tleTogc3RyaW5nXTogeyBtYXg6IG51bWJlciwgcHJldj86IEJ5dGVVbml0IH0gfSA9IHtcclxuICAgICAgICAnQic6IHttYXg6IDEwMjR9LFxyXG4gICAgICAgICdrQic6IHttYXg6IE1hdGgucG93KDEwMjQsIDIpLCBwcmV2OiAnQid9LFxyXG4gICAgICAgICdLQic6IHttYXg6IE1hdGgucG93KDEwMjQsIDIpLCBwcmV2OiAnQid9LCAvLyBCYWNrd2FyZCBjb21wYXRpYmxlXHJcbiAgICAgICAgJ01CJzoge21heDogTWF0aC5wb3coMTAyNCwgMyksIHByZXY6ICdrQid9LFxyXG4gICAgICAgICdHQic6IHttYXg6IE1hdGgucG93KDEwMjQsIDQpLCBwcmV2OiAnTUInfSxcclxuICAgICAgICAnVEInOiB7bWF4OiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwgcHJldjogJ0dCJ31cclxuICAgIH07XHJcblxyXG5cclxuICAgIHRyYW5zZm9ybShpbnB1dDogYW55LCBkZWNpbWFsOiBudW1iZXIgPSAwLCBmcm9tOiBCeXRlVW5pdCA9ICdCJywgdG8/OiBCeXRlVW5pdCk6IGFueSB7XHJcblxyXG4gICAgICAgIGlmICghKGlzTnVtYmVyRmluaXRlKGlucHV0KSAmJlxyXG4gICAgICAgICAgICAgICAgaXNOdW1iZXJGaW5pdGUoZGVjaW1hbCkgJiZcclxuICAgICAgICAgICAgICAgIGlzSW50ZWdlcihkZWNpbWFsKSAmJlxyXG4gICAgICAgICAgICAgICAgaXNQb3NpdGl2ZShkZWNpbWFsKSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGJ5dGVzID0gaW5wdXQ7XHJcbiAgICAgICAgbGV0IHVuaXQgPSBmcm9tO1xyXG4gICAgICAgIHdoaWxlICh1bml0ICE9PSAnQicpIHtcclxuICAgICAgICAgICAgYnl0ZXMgKj0gMTAyNDtcclxuICAgICAgICAgICAgdW5pdCA9IEJ5dGVzUGlwZS5mb3JtYXRzW3VuaXRdLnByZXYhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRvKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IEJ5dGVzUGlwZS5mb3JtYXRzW3RvXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRvRGVjaW1hbChCeXRlc1BpcGUuY2FsY3VsYXRlUmVzdWx0KGZvcm1hdCwgYnl0ZXMpLCBkZWNpbWFsKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBCeXRlc1BpcGUuZm9ybWF0UmVzdWx0KHJlc3VsdCwgdG8pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gQnl0ZXNQaXBlLmZvcm1hdHMpIHtcclxuICAgICAgICAgICAgaWYgKEJ5dGVzUGlwZS5mb3JtYXRzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IEJ5dGVzUGlwZS5mb3JtYXRzW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZXMgPCBmb3JtYXQubWF4KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRvRGVjaW1hbChCeXRlc1BpcGUuY2FsY3VsYXRlUmVzdWx0KGZvcm1hdCwgYnl0ZXMpLCBkZWNpbWFsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJ5dGVzUGlwZS5mb3JtYXRSZXN1bHQocmVzdWx0LCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmb3JtYXRSZXN1bHQocmVzdWx0OiBudW1iZXIsIHVuaXQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGAke3Jlc3VsdH0gJHt1bml0fWA7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNhbGN1bGF0ZVJlc3VsdChmb3JtYXQ6IHsgbWF4OiBudW1iZXIsIHByZXY/OiBCeXRlVW5pdCB9LCBieXRlczogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgcHJldiA9IGZvcm1hdC5wcmV2ID8gQnl0ZXNQaXBlLmZvcm1hdHNbZm9ybWF0LnByZXZdIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiBwcmV2ID8gYnl0ZXMgLyBwcmV2Lm1heCA6IGJ5dGVzO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==