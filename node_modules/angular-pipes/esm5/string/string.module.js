import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { LeftPadPipe } from './left-pad.pipe';
import { MatchPipe } from './match.pipe';
import { PadPipe } from './pad.pipe';
import { ReplacePipe } from './replace.pipe';
import { RightPadPipe } from './right-pad.pipe';
import { SplitPipe } from './split.pipe';
import { TestPipe } from './test.pipe';
import { TrimPipe } from './trim.pipe';
import { NewlinesPipe } from './newlines.pipe';
import { CapitalizePipe } from './capitalize.pipe';
import { UpperFirstPipe } from './upperfirst.pipe';
import { TemplatePipe } from './template.pipe';
import { EncodeURIPipe } from './encode-uri.pipe';
import { EncodeURIComponentPipe } from './encode-uri-component.pipe';
import { DecodeURIPipe } from './decode-uri.pipe';
import { DecodeURIComponentPipe } from './decode-uri-component.pipe';
import { TruncatePipe } from './truncate.pipe';
import { RepeatPipe } from './repeat.pipe';
import { SlugifyPipe } from './slugify.pipe';
import { StripTagsPipe } from "./strip-tags.pipe";
import { LatinizePipe } from "./latinize.pipe";
import { WrapPipe } from "./wrap.pipe";
import { WithPipe } from "./with.pipe";
import { ReverseStrPipe } from "./reverse-str.pipe";
var NgStringPipesModule = /** @class */ (function () {
    function NgStringPipesModule() {
    }
    NgStringPipesModule = tslib_1.__decorate([
        NgModule({
            declarations: [
                LeftPadPipe,
                MatchPipe,
                PadPipe,
                ReplacePipe,
                RightPadPipe,
                SplitPipe,
                TestPipe,
                TrimPipe,
                NewlinesPipe,
                CapitalizePipe,
                UpperFirstPipe,
                TemplatePipe,
                EncodeURIPipe,
                EncodeURIComponentPipe,
                DecodeURIPipe,
                DecodeURIComponentPipe,
                TruncatePipe,
                RepeatPipe,
                SlugifyPipe,
                StripTagsPipe,
                LatinizePipe,
                WrapPipe,
                WithPipe,
                ReverseStrPipe
            ],
            exports: [
                LeftPadPipe,
                MatchPipe,
                PadPipe,
                ReplacePipe,
                RightPadPipe,
                SplitPipe,
                TestPipe,
                TrimPipe,
                NewlinesPipe,
                CapitalizePipe,
                UpperFirstPipe,
                TemplatePipe,
                EncodeURIPipe,
                EncodeURIComponentPipe,
                DecodeURIPipe,
                DecodeURIComponentPipe,
                TruncatePipe,
                RepeatPipe,
                SlugifyPipe,
                StripTagsPipe,
                LatinizePipe,
                WrapPipe,
                WithPipe,
                ReverseStrPipe
            ]
        })
    ], NgStringPipesModule);
    return NgStringPipesModule;
}());
export { NgStringPipesModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJzdHJpbmcvc3RyaW5nLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDckMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDbkUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNyQyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQXlEbEQ7SUFBQTtJQUNBLENBQUM7SUFEWSxtQkFBbUI7UUF0RC9CLFFBQVEsQ0FBQztZQUNSLFlBQVksRUFBRTtnQkFDWixXQUFXO2dCQUNYLFNBQVM7Z0JBQ1QsT0FBTztnQkFDUCxXQUFXO2dCQUNYLFlBQVk7Z0JBQ1osU0FBUztnQkFDVCxRQUFRO2dCQUNSLFFBQVE7Z0JBQ1IsWUFBWTtnQkFDWixjQUFjO2dCQUNkLGNBQWM7Z0JBQ2QsWUFBWTtnQkFDWixhQUFhO2dCQUNiLHNCQUFzQjtnQkFDdEIsYUFBYTtnQkFDYixzQkFBc0I7Z0JBQ3RCLFlBQVk7Z0JBQ1osVUFBVTtnQkFDVixXQUFXO2dCQUNYLGFBQWE7Z0JBQ2IsWUFBWTtnQkFDWixRQUFRO2dCQUNSLFFBQVE7Z0JBQ1IsY0FBYzthQUNmO1lBQ0QsT0FBTyxFQUFFO2dCQUNQLFdBQVc7Z0JBQ1gsU0FBUztnQkFDVCxPQUFPO2dCQUNQLFdBQVc7Z0JBQ1gsWUFBWTtnQkFDWixTQUFTO2dCQUNULFFBQVE7Z0JBQ1IsUUFBUTtnQkFDUixZQUFZO2dCQUNaLGNBQWM7Z0JBQ2QsY0FBYztnQkFDZCxZQUFZO2dCQUNaLGFBQWE7Z0JBQ2Isc0JBQXNCO2dCQUN0QixhQUFhO2dCQUNiLHNCQUFzQjtnQkFDdEIsWUFBWTtnQkFDWixVQUFVO2dCQUNWLFdBQVc7Z0JBQ1gsYUFBYTtnQkFDYixZQUFZO2dCQUNaLFFBQVE7Z0JBQ1IsUUFBUTtnQkFDUixjQUFjO2FBQ2Y7U0FDRixDQUFDO09BQ1csbUJBQW1CLENBQy9CO0lBQUQsMEJBQUM7Q0FBQSxBQURELElBQ0M7U0FEWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7TGVmdFBhZFBpcGV9IGZyb20gJy4vbGVmdC1wYWQucGlwZSc7XHJcbmltcG9ydCB7TWF0Y2hQaXBlfSBmcm9tICcuL21hdGNoLnBpcGUnO1xyXG5pbXBvcnQge1BhZFBpcGV9IGZyb20gJy4vcGFkLnBpcGUnO1xyXG5pbXBvcnQge1JlcGxhY2VQaXBlfSBmcm9tICcuL3JlcGxhY2UucGlwZSc7XHJcbmltcG9ydCB7UmlnaHRQYWRQaXBlfSBmcm9tICcuL3JpZ2h0LXBhZC5waXBlJztcclxuaW1wb3J0IHtTcGxpdFBpcGV9IGZyb20gJy4vc3BsaXQucGlwZSc7XHJcbmltcG9ydCB7VGVzdFBpcGV9IGZyb20gJy4vdGVzdC5waXBlJztcclxuaW1wb3J0IHtUcmltUGlwZX0gZnJvbSAnLi90cmltLnBpcGUnO1xyXG5pbXBvcnQge05ld2xpbmVzUGlwZX0gZnJvbSAnLi9uZXdsaW5lcy5waXBlJztcclxuaW1wb3J0IHtDYXBpdGFsaXplUGlwZX0gZnJvbSAnLi9jYXBpdGFsaXplLnBpcGUnO1xyXG5pbXBvcnQge1VwcGVyRmlyc3RQaXBlfSBmcm9tICcuL3VwcGVyZmlyc3QucGlwZSc7XHJcbmltcG9ydCB7VGVtcGxhdGVQaXBlfSBmcm9tICcuL3RlbXBsYXRlLnBpcGUnO1xyXG5pbXBvcnQge0VuY29kZVVSSVBpcGV9IGZyb20gJy4vZW5jb2RlLXVyaS5waXBlJztcclxuaW1wb3J0IHtFbmNvZGVVUklDb21wb25lbnRQaXBlfSBmcm9tICcuL2VuY29kZS11cmktY29tcG9uZW50LnBpcGUnO1xyXG5pbXBvcnQge0RlY29kZVVSSVBpcGV9IGZyb20gJy4vZGVjb2RlLXVyaS5waXBlJztcclxuaW1wb3J0IHtEZWNvZGVVUklDb21wb25lbnRQaXBlfSBmcm9tICcuL2RlY29kZS11cmktY29tcG9uZW50LnBpcGUnO1xyXG5pbXBvcnQge1RydW5jYXRlUGlwZX0gZnJvbSAnLi90cnVuY2F0ZS5waXBlJztcclxuaW1wb3J0IHtSZXBlYXRQaXBlfSBmcm9tICcuL3JlcGVhdC5waXBlJztcclxuaW1wb3J0IHtTbHVnaWZ5UGlwZX0gZnJvbSAnLi9zbHVnaWZ5LnBpcGUnO1xyXG5pbXBvcnQge1N0cmlwVGFnc1BpcGV9IGZyb20gXCIuL3N0cmlwLXRhZ3MucGlwZVwiO1xyXG5pbXBvcnQge0xhdGluaXplUGlwZX0gZnJvbSBcIi4vbGF0aW5pemUucGlwZVwiO1xyXG5pbXBvcnQge1dyYXBQaXBlfSBmcm9tIFwiLi93cmFwLnBpcGVcIjtcclxuaW1wb3J0IHtXaXRoUGlwZX0gZnJvbSBcIi4vd2l0aC5waXBlXCI7XHJcbmltcG9ydCB7UmV2ZXJzZVN0clBpcGV9IGZyb20gXCIuL3JldmVyc2Utc3RyLnBpcGVcIjtcclxuXHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgTGVmdFBhZFBpcGUsXHJcbiAgICBNYXRjaFBpcGUsXHJcbiAgICBQYWRQaXBlLFxyXG4gICAgUmVwbGFjZVBpcGUsXHJcbiAgICBSaWdodFBhZFBpcGUsXHJcbiAgICBTcGxpdFBpcGUsXHJcbiAgICBUZXN0UGlwZSxcclxuICAgIFRyaW1QaXBlLFxyXG4gICAgTmV3bGluZXNQaXBlLFxyXG4gICAgQ2FwaXRhbGl6ZVBpcGUsXHJcbiAgICBVcHBlckZpcnN0UGlwZSxcclxuICAgIFRlbXBsYXRlUGlwZSxcclxuICAgIEVuY29kZVVSSVBpcGUsXHJcbiAgICBFbmNvZGVVUklDb21wb25lbnRQaXBlLFxyXG4gICAgRGVjb2RlVVJJUGlwZSxcclxuICAgIERlY29kZVVSSUNvbXBvbmVudFBpcGUsXHJcbiAgICBUcnVuY2F0ZVBpcGUsXHJcbiAgICBSZXBlYXRQaXBlLFxyXG4gICAgU2x1Z2lmeVBpcGUsXHJcbiAgICBTdHJpcFRhZ3NQaXBlLFxyXG4gICAgTGF0aW5pemVQaXBlLFxyXG4gICAgV3JhcFBpcGUsXHJcbiAgICBXaXRoUGlwZSxcclxuICAgIFJldmVyc2VTdHJQaXBlXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBMZWZ0UGFkUGlwZSxcclxuICAgIE1hdGNoUGlwZSxcclxuICAgIFBhZFBpcGUsXHJcbiAgICBSZXBsYWNlUGlwZSxcclxuICAgIFJpZ2h0UGFkUGlwZSxcclxuICAgIFNwbGl0UGlwZSxcclxuICAgIFRlc3RQaXBlLFxyXG4gICAgVHJpbVBpcGUsXHJcbiAgICBOZXdsaW5lc1BpcGUsXHJcbiAgICBDYXBpdGFsaXplUGlwZSxcclxuICAgIFVwcGVyRmlyc3RQaXBlLFxyXG4gICAgVGVtcGxhdGVQaXBlLFxyXG4gICAgRW5jb2RlVVJJUGlwZSxcclxuICAgIEVuY29kZVVSSUNvbXBvbmVudFBpcGUsXHJcbiAgICBEZWNvZGVVUklQaXBlLFxyXG4gICAgRGVjb2RlVVJJQ29tcG9uZW50UGlwZSxcclxuICAgIFRydW5jYXRlUGlwZSxcclxuICAgIFJlcGVhdFBpcGUsXHJcbiAgICBTbHVnaWZ5UGlwZSxcclxuICAgIFN0cmlwVGFnc1BpcGUsXHJcbiAgICBMYXRpbml6ZVBpcGUsXHJcbiAgICBXcmFwUGlwZSxcclxuICAgIFdpdGhQaXBlLFxyXG4gICAgUmV2ZXJzZVN0clBpcGVcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1N0cmluZ1BpcGVzTW9kdWxlIHtcclxufVxyXG4iXX0=