import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { isString, isNull } from '../utils/utils';
var WithPipe = /** @class */ (function () {
    function WithPipe() {
    }
    WithPipe.prototype.transform = function (input, start, ends, csensitive) {
        if (start === void 0) { start = null; }
        if (ends === void 0) { ends = null; }
        if (csensitive === void 0) { csensitive = false; }
        if (!isString(input) || (isNull(start) && isNull(ends)) || (start == '') || (ends == '')) {
            return input;
        }
        input = (csensitive) ? input : input.toLowerCase();
        if (!isNull(start) && !isNull(ends)) {
            var a = !input.indexOf((csensitive) ? start : start.toLowerCase());
            var b = input.indexOf((csensitive) ? ends : ends.toLowerCase(), (input.length - ends.length)) !== -1;
            if (a == true && b == true) {
                return true;
            }
            else {
                return false;
            }
        }
        if (!isNull(start)) {
            return !input.indexOf((csensitive) ? start : start.toLowerCase());
        }
        if (!isNull(ends)) {
            var position = input.length - ends.length;
            return input.indexOf((csensitive) ? ends : ends.toLowerCase(), position) !== -1;
        }
    };
    WithPipe = tslib_1.__decorate([
        Pipe({ name: 'with' })
    ], WithPipe);
    return WithPipe;
}());
export { WithPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbInN0cmluZy93aXRoLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBQyxRQUFRLEVBQUUsTUFBTSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFHaEQ7SUFBQTtJQStCQSxDQUFDO0lBN0JDLDRCQUFTLEdBQVQsVUFBVSxLQUFhLEVBQUUsS0FBeUIsRUFBRSxJQUF3QixFQUFFLFVBQTJCO1FBQWhGLHNCQUFBLEVBQUEsWUFBeUI7UUFBRSxxQkFBQSxFQUFBLFdBQXdCO1FBQUUsMkJBQUEsRUFBQSxrQkFBMkI7UUFFdkcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsRUFBRTtZQUN4RixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsS0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRW5ELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLEdBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDNUUsSUFBSSxDQUFDLEdBQVksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFFOUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7Z0JBQzFCLE9BQU8sSUFBSSxDQUFBO2FBQ1o7aUJBQU07Z0JBQ0wsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNsQixPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1NBQ25FO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNqQixJQUFJLFFBQVEsR0FBUSxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFL0MsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ2pGO0lBQ0gsQ0FBQztJQTlCVSxRQUFRO1FBRHBCLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUMsQ0FBQztPQUNSLFFBQVEsQ0ErQnBCO0lBQUQsZUFBQztDQUFBLEFBL0JELElBK0JDO1NBL0JZLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge2lzU3RyaW5nLCBpc051bGx9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtuYW1lOiAnd2l0aCd9KVxyXG5leHBvcnQgY2xhc3MgV2l0aFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0oaW5wdXQ6IHN0cmluZywgc3RhcnQ6IHN0cmluZ3xudWxsID0gbnVsbCwgZW5kczogc3RyaW5nfG51bGwgPSBudWxsLCBjc2Vuc2l0aXZlOiBib29sZWFuID0gZmFsc2UpOiBhbnkge1xyXG4gICAgXHJcbiAgICBpZiAoIWlzU3RyaW5nKGlucHV0KSB8fCAoaXNOdWxsKHN0YXJ0KSAmJiBpc051bGwoZW5kcykpIHx8IChzdGFydCA9PSAnJykgfHwgKGVuZHMgPT0gJycpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaW5wdXQgPSAoY3NlbnNpdGl2ZSkgPyBpbnB1dCA6IGlucHV0LnRvTG93ZXJDYXNlKCk7XHJcbiAgICBcclxuICAgIGlmICghaXNOdWxsKHN0YXJ0KSAmJiAhaXNOdWxsKGVuZHMpKSB7XHJcbiAgICAgIGxldCBhOiBib29sZWFuID0gIWlucHV0LmluZGV4T2YoKGNzZW5zaXRpdmUpID8gc3RhcnQgOiBzdGFydC50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgbGV0IGI6IGJvb2xlYW4gPSBpbnB1dC5pbmRleE9mKChjc2Vuc2l0aXZlKSA/IGVuZHMgOiBlbmRzLnRvTG93ZXJDYXNlKCksIChpbnB1dC5sZW5ndGggLSBlbmRzLmxlbmd0aCkpICE9PSAtMTtcclxuICAgICAgXHJcbiAgICAgIGlmIChhID09IHRydWUgJiYgYiA9PSB0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKCFpc051bGwoc3RhcnQpKSB7XHJcbiAgICAgIHJldHVybiAhaW5wdXQuaW5kZXhPZigoY3NlbnNpdGl2ZSkgPyBzdGFydCA6IHN0YXJ0LnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoIWlzTnVsbChlbmRzKSkge1xyXG4gICAgICBsZXQgcG9zaXRpb246IGFueSA9IGlucHV0Lmxlbmd0aCAtIGVuZHMubGVuZ3RoO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGlucHV0LmluZGV4T2YoKGNzZW5zaXRpdmUpID8gZW5kcyA6IGVuZHMudG9Mb3dlckNhc2UoKSwgcG9zaXRpb24pICE9PSAtMTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=