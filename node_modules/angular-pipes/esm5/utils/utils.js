import * as tslib_1 from "tslib";
export function isUndefined(value) {
    return typeof value === 'undefined';
}
export function isNull(value) {
    return value === null;
}
export function isNumber(value) {
    return typeof value === 'number';
}
export function isNumberFinite(value) {
    return isNumber(value) && isFinite(value);
}
// Not strict positive
export function isPositive(value) {
    return value >= 0;
}
export function isInteger(value) {
    // No rest, is an integer
    return (value % 1) === 0;
}
export function isNil(value) {
    return value === null || typeof (value) === 'undefined';
}
export function isString(value) {
    return typeof value === 'string';
}
export function isObject(value) {
    return value !== null && typeof value === 'object';
}
export function isArray(value) {
    return Array.isArray(value);
}
export function isFunction(value) {
    return typeof value === 'function';
}
export function toDecimal(value, decimal) {
    return Math.round(value * Math.pow(10, decimal)) / Math.pow(10, decimal);
}
export function upperFirst(value) {
    return value.slice(0, 1).toUpperCase() + value.slice(1);
}
export function createRound(method) {
    // <any>Math to suppress error
    var func = Math[method];
    return function (value, precision) {
        if (precision === void 0) { precision = 0; }
        if (typeof value === 'string') {
            throw new TypeError('Rounding method needs a number');
        }
        if (typeof precision !== 'number' || isNaN(precision)) {
            precision = 0;
        }
        if (precision) {
            var pair = (value + "e").split('e');
            var val = func(pair[0] + "e" + (+pair[1] + precision));
            pair = (val + "e").split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(value);
    };
}
export function leftPad(str, len, ch) {
    if (len === void 0) { len = 0; }
    if (ch === void 0) { ch = ' '; }
    str = String(str);
    ch = toString(ch);
    var i = -1;
    var length = len - str.length;
    while (++i < length && (str.length + ch.length) <= len) {
        str = ch + str;
    }
    return str;
}
export function rightPad(str, len, ch) {
    if (len === void 0) { len = 0; }
    if (ch === void 0) { ch = ' '; }
    str = String(str);
    ch = toString(ch);
    var i = -1;
    var length = len - str.length;
    while (++i < length && (str.length + ch.length) <= len) {
        str += ch;
    }
    return str;
}
export function toString(value) {
    return "" + value;
}
export function pad(str, len, ch) {
    if (len === void 0) { len = 0; }
    if (ch === void 0) { ch = ' '; }
    str = String(str);
    ch = toString(ch);
    var i = -1;
    var length = len - str.length;
    var left = true;
    while (++i < length) {
        var l = (str.length + ch.length <= len) ? (str.length + ch.length) : (str.length + 1);
        if (left) {
            str = leftPad(str, l, ch);
        }
        else {
            str = rightPad(str, l, ch);
        }
        left = !left;
    }
    return str;
}
export function flatten(input, index) {
    if (index === void 0) { index = 0; }
    if (index >= input.length) {
        return input;
    }
    if (isArray(input[index])) {
        return flatten(input.slice(0, index).concat(input[index], input.slice(index + 1)), index);
    }
    return flatten(input, index + 1);
}
export function getProperty(value, key) {
    var e_1, _a;
    if (isNil(value) || !isObject(value)) {
        return undefined;
    }
    var keys = key.split('.');
    var result = value[keys.shift()];
    try {
        for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var key_1 = keys_1_1.value;
            if (isNil(result) || !isObject(result)) {
                return undefined;
            }
            result = result[key_1];
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
export function sum(input, initial) {
    if (initial === void 0) { initial = 0; }
    return input.reduce(function (previous, current) { return previous + current; }, initial);
}
// http://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array-in-javascript
export function shuffle(input) {
    if (!isArray(input)) {
        return input;
    }
    var copy = tslib_1.__spread(input);
    for (var i = copy.length; i; --i) {
        var j = Math.floor(Math.random() * i);
        var x = copy[i - 1];
        copy[i - 1] = copy[j];
        copy[j] = x;
    }
    return copy;
}
export function deepIndexOf(collection, value) {
    var index = -1;
    var length = collection.length;
    while (++index < length) {
        if (deepEqual(value, collection[index])) {
            return index;
        }
    }
    return -1;
}
export function deepEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (!(typeof a === 'object' && typeof b === 'object')) {
        return a === b;
    }
    var keysA = Object.keys(a);
    var keysB = Object.keys(b);
    if (keysA.length !== keysB.length) {
        return false;
    }
    // Test for A's keys different from B.
    var hasOwn = Object.prototype.hasOwnProperty;
    for (var i = 0; i < keysA.length; i++) {
        var key = keysA[i];
        if (!hasOwn.call(b, keysA[i]) || !deepEqual(a[key], b[key])) {
            return false;
        }
    }
    return true;
}
export function isDeepObject(object) {
    return object.__isDeepObject__;
}
export function wrapDeep(object) {
    return new DeepWrapper(object);
}
export function unwrapDeep(object) {
    if (isDeepObject(object)) {
        return object.data;
    }
    return object;
}
var DeepWrapper = /** @class */ (function () {
    function DeepWrapper(data) {
        this.data = data;
        this.__isDeepObject__ = true;
    }
    return DeepWrapper;
}());
export { DeepWrapper };
export function count(input) {
    if (!isArray(input) && !isObject(input) && !isString(input)) {
        return input;
    }
    if (isObject(input)) {
        return Object.keys(input).map(function (value) { return input[value]; }).length;
    }
    return input.length;
}
export function empty(input) {
    if (!isArray(input)) {
        return input;
    }
    return input.length === 0;
}
export function every(input, predicate) {
    if (!isArray(input) || !predicate) {
        return input;
    }
    var result = true;
    var i = -1;
    while (++i < input.length && result) {
        result = predicate(input[i], i, input);
    }
    return result;
}
export function takeUntil(input, predicate) {
    var i = -1;
    var result = [];
    while (++i < input.length && !predicate(input[i], i, input)) {
        result[i] = input[i];
    }
    return result;
}
export function takeWhile(input, predicate) {
    return takeUntil(input, function (item, index, collection) { return !predicate(item, index, collection); });
}
//# sourceMappingURL=data:application/json;base64,