import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { isArray, isFunction, getProperty } from '../utils/utils';
var FirstOrDefaultPipe = /** @class */ (function () {
    function FirstOrDefaultPipe() {
    }
    FirstOrDefaultPipe_1 = FirstOrDefaultPipe;
    FirstOrDefaultPipe.find = function (input, predicate, defaultValue) {
        var found = false;
        var result;
        var i = -1;
        while (!found && ++i < input.length) {
            found = predicate(input[i], i, input);
        }
        if (found) {
            result = input[i];
        }
        if (typeof result === 'undefined' && typeof defaultValue !== 'undefined') {
            result = defaultValue;
        }
        return result;
    };
    FirstOrDefaultPipe.prototype.transform = function (input, predicate, defaultValue) {
        if (!isArray(input)) {
            return input;
        }
        if (isFunction(predicate)) {
            return FirstOrDefaultPipe_1.find(input, predicate, defaultValue);
        }
        else if (isArray(predicate)) {
            var _a = tslib_1.__read(predicate, 2), key_1 = _a[0], value_1 = _a[1];
            return FirstOrDefaultPipe_1.find(input, function (item) { return getProperty(item, key_1) === value_1; }, defaultValue);
        }
        else if (predicate) {
            return FirstOrDefaultPipe_1.find(input, function (item) { return item === predicate; }, defaultValue);
        }
        else {
            return input;
        }
    };
    var FirstOrDefaultPipe_1;
    FirstOrDefaultPipe = FirstOrDefaultPipe_1 = tslib_1.__decorate([
        Pipe({
            name: 'firstOrDefault'
        })
    ], FirstOrDefaultPipe);
    return FirstOrDefaultPipe;
}());
export { FirstOrDefaultPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyc3Qtb3ItZGVmYXVsdC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbImFycmF5L2ZpcnN0LW9yLWRlZmF1bHQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLElBQUksRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUF1QixNQUFNLGdCQUFnQixDQUFDO0FBTXZGO0lBQUE7SUFtREEsQ0FBQzsyQkFuRFksa0JBQWtCO0lBRWQsdUJBQUksR0FBbkIsVUFDRSxLQUFZLEVBQ1osU0FBOEIsRUFDOUIsWUFBa0I7UUFHbEIsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLElBQUksTUFBVyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRVgsT0FBTyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ25DLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN2QztRQUVELElBQUksS0FBSyxFQUFFO1lBQ1QsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQjtRQUVELElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE9BQU8sWUFBWSxLQUFLLFdBQVcsRUFBRTtZQUN4RSxNQUFNLEdBQUcsWUFBWSxDQUFDO1NBQ3ZCO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELHNDQUFTLEdBQVQsVUFDRSxLQUFVLEVBQ1YsU0FBMkMsRUFDM0MsWUFBa0I7UUFHbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNuQixPQUFPLEtBQUssQ0FBQTtTQUNiO1FBRUQsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDekIsT0FBTyxvQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUF1QixTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDckY7YUFDSSxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNyQixJQUFBLGlDQUFtQyxFQUFsQyxhQUFHLEVBQUUsZUFBNkIsQ0FBQztZQUMxQyxPQUFPLG9CQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBQyxJQUFTLElBQUssT0FBQSxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUcsQ0FBQyxLQUFLLE9BQUssRUFBaEMsQ0FBZ0MsRUFBRSxZQUFZLENBQUMsQ0FBQztTQUN0RzthQUNJLElBQUksU0FBUyxFQUFFO1lBQ2xCLE9BQU8sb0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFDLElBQUksSUFBSyxPQUFBLElBQUksS0FBVSxTQUFTLEVBQXZCLENBQXVCLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDeEY7YUFDSTtZQUNILE9BQU8sS0FBSyxDQUFDO1NBQ2Q7SUFDSCxDQUFDOztJQWxEVSxrQkFBa0I7UUFIOUIsSUFBSSxDQUFDO1lBQ0osSUFBSSxFQUFFLGdCQUFnQjtTQUN2QixDQUFDO09BQ1csa0JBQWtCLENBbUQ5QjtJQUFELHlCQUFDO0NBQUEsQUFuREQsSUFtREM7U0FuRFksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNBcnJheSwgaXNGdW5jdGlvbiwgZ2V0UHJvcGVydHksIENvbGxlY3Rpb25QcmVkaWNhdGUgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdmaXJzdE9yRGVmYXVsdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZpcnN0T3JEZWZhdWx0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHByaXZhdGUgc3RhdGljIGZpbmQgKFxyXG4gICAgaW5wdXQ6IGFueVtdLCBcclxuICAgIHByZWRpY2F0ZTogQ29sbGVjdGlvblByZWRpY2F0ZSxcclxuICAgIGRlZmF1bHRWYWx1ZT86IGFueVxyXG4gICk6IGFueSB7XHJcbiAgICBcclxuICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG4gICAgbGV0IHJlc3VsdDogYW55O1xyXG4gICAgbGV0IGkgPSAtMTtcclxuICAgIFxyXG4gICAgd2hpbGUgKCFmb3VuZCAmJiArK2kgPCBpbnB1dC5sZW5ndGgpIHtcclxuICAgICAgZm91bmQgPSBwcmVkaWNhdGUoaW5wdXRbaV0sIGksIGlucHV0KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKGZvdW5kKSB7XHJcbiAgICAgIHJlc3VsdCA9IGlucHV0W2ldO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgcmVzdWx0ID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICBcclxuICB0cmFuc2Zvcm0gKFxyXG4gICAgaW5wdXQ6IGFueSxcclxuICAgIHByZWRpY2F0ZTogQ29sbGVjdGlvblByZWRpY2F0ZXxzdHJpbmdbXXxhbnksXHJcbiAgICBkZWZhdWx0VmFsdWU/OiBhbnlcclxuICApOiBhbnkge1xyXG4gICAgXHJcbiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoaXNGdW5jdGlvbihwcmVkaWNhdGUpKSB7XHJcbiAgICAgIHJldHVybiBGaXJzdE9yRGVmYXVsdFBpcGUuZmluZChpbnB1dCwgPENvbGxlY3Rpb25QcmVkaWNhdGU+cHJlZGljYXRlLCBkZWZhdWx0VmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNBcnJheShwcmVkaWNhdGUpKSB7XHJcbiAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IDxzdHJpbmdbXT4gcHJlZGljYXRlO1xyXG4gICAgICByZXR1cm4gRmlyc3RPckRlZmF1bHRQaXBlLmZpbmQoaW5wdXQsIChpdGVtOiBhbnkpID0+IGdldFByb3BlcnR5KGl0ZW0sIGtleSkgPT09IHZhbHVlLCBkZWZhdWx0VmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocHJlZGljYXRlKSB7XHJcbiAgICAgIHJldHVybiBGaXJzdE9yRGVmYXVsdFBpcGUuZmluZChpbnB1dCwgKGl0ZW0pID0+IGl0ZW0gPT09IDxhbnk+cHJlZGljYXRlLCBkZWZhdWx0VmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=