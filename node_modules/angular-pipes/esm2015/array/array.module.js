import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { EmptyPipe } from './empty.pipe';
import { HeadPipe } from './head.pipe';
import { InitialPipe } from './initial.pipe';
import { LastPipe } from './last.pipe';
import { JoinPipe } from './join.pipe';
import { TailPipe } from './tail.pipe';
import { UniqPipe } from './uniq.pipe';
import { WithoutPipe } from './without.pipe';
import { MapPipe } from './map.pipe';
import { WherePipe } from './where.pipe';
import { FirstOrDefaultPipe } from './first-or-default.pipe';
import { RangePipe } from './range.pipe';
import { PluckPipe } from './pluck.pipe';
import { ReversePipe } from './reverse.pipe';
import { OrderByPipe } from './order-by.pipe';
import { CountPipe } from './count.pipe';
import { SomePipe } from './some.pipe';
import { EveryPipe } from './every.pipe';
import { ShufflePipe } from './shuffle.pipe';
import { TakePipe } from './take.pipe';
import { DropPipe } from './drop.pipe';
import { DeepPipe } from './deep.pipe';
import { ChunkPipe } from './chunk.pipe';
import { FlattenPipe } from './flatten.pipe';
import { IntersectionPipe } from './intersection.pipe';
import { UnionPipe } from './union.pipe';
import { TakeWhilePipe } from './take-while.pipe';
import { TakeUntilPipe } from './take-until.pipe';
let NgArrayPipesModule = class NgArrayPipesModule {
};
NgArrayPipesModule = tslib_1.__decorate([
    NgModule({
        declarations: [
            EmptyPipe,
            HeadPipe,
            InitialPipe,
            LastPipe,
            JoinPipe,
            TailPipe,
            UniqPipe,
            WithoutPipe,
            MapPipe,
            WherePipe,
            RangePipe,
            PluckPipe,
            ReversePipe,
            OrderByPipe,
            CountPipe,
            SomePipe,
            EveryPipe,
            ShufflePipe,
            TakePipe,
            DropPipe,
            DeepPipe,
            ChunkPipe,
            FlattenPipe,
            FirstOrDefaultPipe,
            IntersectionPipe,
            UnionPipe,
            TakeWhilePipe,
            TakeUntilPipe
        ],
        exports: [
            EmptyPipe,
            HeadPipe,
            InitialPipe,
            LastPipe,
            JoinPipe,
            TailPipe,
            UniqPipe,
            WithoutPipe,
            MapPipe,
            WherePipe,
            RangePipe,
            PluckPipe,
            ReversePipe,
            OrderByPipe,
            CountPipe,
            SomePipe,
            EveryPipe,
            ShufflePipe,
            TakePipe,
            DropPipe,
            DeepPipe,
            ChunkPipe,
            FlattenPipe,
            FirstOrDefaultPipe,
            IntersectionPipe,
            UnionPipe,
            TakeWhilePipe,
            TakeUntilPipe
        ]
    })
], NgArrayPipesModule);
export { NgArrayPipesModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXkubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbImFycmF5L2FycmF5Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBaUVsRCxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtDQUFHLENBQUE7QUFBckIsa0JBQWtCO0lBOUQ5QixRQUFRLENBQUM7UUFDUixZQUFZLEVBQUU7WUFDWixTQUFTO1lBQ1QsUUFBUTtZQUNSLFdBQVc7WUFDWCxRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsV0FBVztZQUNYLE9BQU87WUFDUCxTQUFTO1lBQ1QsU0FBUztZQUNULFNBQVM7WUFDVCxXQUFXO1lBQ1gsV0FBVztZQUNYLFNBQVM7WUFDVCxRQUFRO1lBQ1IsU0FBUztZQUNULFdBQVc7WUFDWCxRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixTQUFTO1lBQ1QsV0FBVztZQUNYLGtCQUFrQjtZQUNsQixnQkFBZ0I7WUFDaEIsU0FBUztZQUNULGFBQWE7WUFDYixhQUFhO1NBQ2Q7UUFDRCxPQUFPLEVBQUU7WUFDUCxTQUFTO1lBQ1QsUUFBUTtZQUNSLFdBQVc7WUFDWCxRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsV0FBVztZQUNYLE9BQU87WUFDUCxTQUFTO1lBQ1QsU0FBUztZQUNULFNBQVM7WUFDVCxXQUFXO1lBQ1gsV0FBVztZQUNYLFNBQVM7WUFDVCxRQUFRO1lBQ1IsU0FBUztZQUNULFdBQVc7WUFDWCxRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixTQUFTO1lBQ1QsV0FBVztZQUNYLGtCQUFrQjtZQUNsQixnQkFBZ0I7WUFDaEIsU0FBUztZQUNULGFBQWE7WUFDYixhQUFhO1NBQ2Q7S0FDRixDQUFDO0dBQ1csa0JBQWtCLENBQUc7U0FBckIsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEVtcHR5UGlwZSB9IGZyb20gJy4vZW1wdHkucGlwZSc7XHJcbmltcG9ydCB7IEhlYWRQaXBlIH0gZnJvbSAnLi9oZWFkLnBpcGUnO1xyXG5pbXBvcnQgeyBJbml0aWFsUGlwZSB9IGZyb20gJy4vaW5pdGlhbC5waXBlJztcclxuaW1wb3J0IHsgTGFzdFBpcGUgfSBmcm9tICcuL2xhc3QucGlwZSc7XHJcbmltcG9ydCB7IEpvaW5QaXBlIH0gZnJvbSAnLi9qb2luLnBpcGUnO1xyXG5pbXBvcnQgeyBUYWlsUGlwZSB9IGZyb20gJy4vdGFpbC5waXBlJztcclxuaW1wb3J0IHsgVW5pcVBpcGUgfSBmcm9tICcuL3VuaXEucGlwZSc7XHJcbmltcG9ydCB7IFdpdGhvdXRQaXBlIH0gZnJvbSAnLi93aXRob3V0LnBpcGUnO1xyXG5pbXBvcnQgeyBNYXBQaXBlIH0gZnJvbSAnLi9tYXAucGlwZSc7XHJcbmltcG9ydCB7IFdoZXJlUGlwZSB9IGZyb20gJy4vd2hlcmUucGlwZSc7XHJcbmltcG9ydCB7IEZpcnN0T3JEZWZhdWx0UGlwZSB9IGZyb20gJy4vZmlyc3Qtb3ItZGVmYXVsdC5waXBlJztcclxuaW1wb3J0IHsgUmFuZ2VQaXBlIH0gZnJvbSAnLi9yYW5nZS5waXBlJztcclxuaW1wb3J0IHsgUGx1Y2tQaXBlIH0gZnJvbSAnLi9wbHVjay5waXBlJztcclxuaW1wb3J0IHsgUmV2ZXJzZVBpcGUgfSBmcm9tICcuL3JldmVyc2UucGlwZSc7XHJcbmltcG9ydCB7IE9yZGVyQnlQaXBlIH0gZnJvbSAnLi9vcmRlci1ieS5waXBlJztcclxuaW1wb3J0IHsgQ291bnRQaXBlIH0gZnJvbSAnLi9jb3VudC5waXBlJztcclxuaW1wb3J0IHsgU29tZVBpcGUgfSBmcm9tICcuL3NvbWUucGlwZSc7XHJcbmltcG9ydCB7IEV2ZXJ5UGlwZSB9IGZyb20gJy4vZXZlcnkucGlwZSc7XHJcbmltcG9ydCB7IFNodWZmbGVQaXBlIH0gZnJvbSAnLi9zaHVmZmxlLnBpcGUnO1xyXG5pbXBvcnQgeyBUYWtlUGlwZSB9IGZyb20gJy4vdGFrZS5waXBlJztcclxuaW1wb3J0IHsgRHJvcFBpcGUgfSBmcm9tICcuL2Ryb3AucGlwZSc7XHJcbmltcG9ydCB7IERlZXBQaXBlIH0gZnJvbSAnLi9kZWVwLnBpcGUnO1xyXG5pbXBvcnQgeyBDaHVua1BpcGUgfSBmcm9tICcuL2NodW5rLnBpcGUnO1xyXG5pbXBvcnQgeyBGbGF0dGVuUGlwZSB9IGZyb20gJy4vZmxhdHRlbi5waXBlJztcclxuaW1wb3J0IHsgSW50ZXJzZWN0aW9uUGlwZSB9IGZyb20gJy4vaW50ZXJzZWN0aW9uLnBpcGUnO1xyXG5pbXBvcnQgeyBVbmlvblBpcGUgfSBmcm9tICcuL3VuaW9uLnBpcGUnO1xyXG5pbXBvcnQgeyBUYWtlV2hpbGVQaXBlIH0gZnJvbSAnLi90YWtlLXdoaWxlLnBpcGUnO1xyXG5pbXBvcnQgeyBUYWtlVW50aWxQaXBlIH0gZnJvbSAnLi90YWtlLXVudGlsLnBpcGUnO1xyXG5cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBFbXB0eVBpcGUsXHJcbiAgICBIZWFkUGlwZSxcclxuICAgIEluaXRpYWxQaXBlLFxyXG4gICAgTGFzdFBpcGUsXHJcbiAgICBKb2luUGlwZSxcclxuICAgIFRhaWxQaXBlLFxyXG4gICAgVW5pcVBpcGUsXHJcbiAgICBXaXRob3V0UGlwZSxcclxuICAgIE1hcFBpcGUsXHJcbiAgICBXaGVyZVBpcGUsXHJcbiAgICBSYW5nZVBpcGUsXHJcbiAgICBQbHVja1BpcGUsXHJcbiAgICBSZXZlcnNlUGlwZSxcclxuICAgIE9yZGVyQnlQaXBlLFxyXG4gICAgQ291bnRQaXBlLFxyXG4gICAgU29tZVBpcGUsXHJcbiAgICBFdmVyeVBpcGUsXHJcbiAgICBTaHVmZmxlUGlwZSxcclxuICAgIFRha2VQaXBlLFxyXG4gICAgRHJvcFBpcGUsXHJcbiAgICBEZWVwUGlwZSxcclxuICAgIENodW5rUGlwZSxcclxuICAgIEZsYXR0ZW5QaXBlLFxyXG4gICAgRmlyc3RPckRlZmF1bHRQaXBlLFxyXG4gICAgSW50ZXJzZWN0aW9uUGlwZSxcclxuICAgIFVuaW9uUGlwZSxcclxuICAgIFRha2VXaGlsZVBpcGUsXHJcbiAgICBUYWtlVW50aWxQaXBlXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBFbXB0eVBpcGUsXHJcbiAgICBIZWFkUGlwZSxcclxuICAgIEluaXRpYWxQaXBlLFxyXG4gICAgTGFzdFBpcGUsXHJcbiAgICBKb2luUGlwZSxcclxuICAgIFRhaWxQaXBlLFxyXG4gICAgVW5pcVBpcGUsXHJcbiAgICBXaXRob3V0UGlwZSxcclxuICAgIE1hcFBpcGUsXHJcbiAgICBXaGVyZVBpcGUsXHJcbiAgICBSYW5nZVBpcGUsXHJcbiAgICBQbHVja1BpcGUsXHJcbiAgICBSZXZlcnNlUGlwZSxcclxuICAgIE9yZGVyQnlQaXBlLFxyXG4gICAgQ291bnRQaXBlLFxyXG4gICAgU29tZVBpcGUsXHJcbiAgICBFdmVyeVBpcGUsXHJcbiAgICBTaHVmZmxlUGlwZSxcclxuICAgIFRha2VQaXBlLFxyXG4gICAgRHJvcFBpcGUsXHJcbiAgICBEZWVwUGlwZSxcclxuICAgIENodW5rUGlwZSxcclxuICAgIEZsYXR0ZW5QaXBlLFxyXG4gICAgRmlyc3RPckRlZmF1bHRQaXBlLFxyXG4gICAgSW50ZXJzZWN0aW9uUGlwZSxcclxuICAgIFVuaW9uUGlwZSxcclxuICAgIFRha2VXaGlsZVBpcGUsXHJcbiAgICBUYWtlVW50aWxQaXBlXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdBcnJheVBpcGVzTW9kdWxlIHt9XHJcbiJdfQ==