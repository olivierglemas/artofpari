import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { isNull, isNil, isUndefined, isFunction, isArray, isString, isObject, isNumber } from '../utils/utils';
let IsNullPipe = class IsNullPipe {
    transform(value) {
        return isNull(value);
    }
};
IsNullPipe = tslib_1.__decorate([
    Pipe({
        name: 'isNull'
    })
], IsNullPipe);
export { IsNullPipe };
let IsUndefinedPipe = class IsUndefinedPipe {
    transform(value) {
        return isUndefined(value);
    }
};
IsUndefinedPipe = tslib_1.__decorate([
    Pipe({
        name: 'isUndefined'
    })
], IsUndefinedPipe);
export { IsUndefinedPipe };
let IsNilPipe = class IsNilPipe {
    transform(value) {
        return isNil(value);
    }
};
IsNilPipe = tslib_1.__decorate([
    Pipe({
        name: 'isNil'
    })
], IsNilPipe);
export { IsNilPipe };
let IsFunctionPipe = class IsFunctionPipe {
    transform(value) {
        return isFunction(value);
    }
};
IsFunctionPipe = tslib_1.__decorate([
    Pipe({
        name: 'isFunction'
    })
], IsFunctionPipe);
export { IsFunctionPipe };
let IsNumberPipe = class IsNumberPipe {
    transform(value) {
        return isNumber(value);
    }
};
IsNumberPipe = tslib_1.__decorate([
    Pipe({
        name: 'isNumber'
    })
], IsNumberPipe);
export { IsNumberPipe };
let IsStringPipe = class IsStringPipe {
    transform(value) {
        return isString(value);
    }
};
IsStringPipe = tslib_1.__decorate([
    Pipe({
        name: 'isString'
    })
], IsStringPipe);
export { IsStringPipe };
let IsArrayPipe = class IsArrayPipe {
    transform(value) {
        return isArray(value);
    }
};
IsArrayPipe = tslib_1.__decorate([
    Pipe({
        name: 'isArray'
    })
], IsArrayPipe);
export { IsArrayPipe };
let IsObjectPipe = class IsObjectPipe {
    transform(value) {
        return isObject(value);
    }
};
IsObjectPipe = tslib_1.__decorate([
    Pipe({
        name: 'isObject'
    })
], IsObjectPipe);
export { IsObjectPipe };
let IsDefinedPipe = class IsDefinedPipe {
    transform(value) {
        return !isUndefined(value);
    }
};
IsDefinedPipe = tslib_1.__decorate([
    Pipe({
        name: 'isDefined'
    })
], IsDefinedPipe);
export { IsDefinedPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJib29sZWFuL3R5cGVzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFDTCxNQUFNLEVBQ04sS0FBSyxFQUNMLFdBQVcsRUFDWCxVQUFVLEVBQ1YsT0FBTyxFQUNQLFFBQVEsRUFDUixRQUFRLEVBQ1IsUUFBUSxFQUNULE1BQU0sZ0JBQWdCLENBQUM7QUFLeEIsSUFBYSxVQUFVLEdBQXZCLE1BQWEsVUFBVTtJQUVyQixTQUFTLENBQUUsS0FBVTtRQUVuQixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDO0NBQ0YsQ0FBQTtBQU5ZLFVBQVU7SUFIdEIsSUFBSSxDQUFDO1FBQ0osSUFBSSxFQUFFLFFBQVE7S0FDZixDQUFDO0dBQ1csVUFBVSxDQU10QjtTQU5ZLFVBQVU7QUFXdkIsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtJQUUxQixTQUFTLENBQUUsS0FBVTtRQUVuQixPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0NBQ0YsQ0FBQTtBQU5ZLGVBQWU7SUFIM0IsSUFBSSxDQUFDO1FBQ0osSUFBSSxFQUFFLGFBQWE7S0FDcEIsQ0FBQztHQUNXLGVBQWUsQ0FNM0I7U0FOWSxlQUFlO0FBVzVCLElBQWEsU0FBUyxHQUF0QixNQUFhLFNBQVM7SUFFcEIsU0FBUyxDQUFFLEtBQVU7UUFFbkIsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEIsQ0FBQztDQUNGLENBQUE7QUFOWSxTQUFTO0lBSHJCLElBQUksQ0FBQztRQUNKLElBQUksRUFBRSxPQUFPO0tBQ2QsQ0FBQztHQUNXLFNBQVMsQ0FNckI7U0FOWSxTQUFTO0FBV3RCLElBQWEsY0FBYyxHQUEzQixNQUFhLGNBQWM7SUFFekIsU0FBUyxDQUFFLEtBQVU7UUFFbkIsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNGLENBQUE7QUFOWSxjQUFjO0lBSDFCLElBQUksQ0FBQztRQUNKLElBQUksRUFBRSxZQUFZO0tBQ25CLENBQUM7R0FDVyxjQUFjLENBTTFCO1NBTlksY0FBYztBQVczQixJQUFhLFlBQVksR0FBekIsTUFBYSxZQUFZO0lBRXZCLFNBQVMsQ0FBRSxLQUFVO1FBRW5CLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7Q0FDRixDQUFBO0FBTlksWUFBWTtJQUh4QixJQUFJLENBQUM7UUFDSixJQUFJLEVBQUUsVUFBVTtLQUNqQixDQUFDO0dBQ1csWUFBWSxDQU14QjtTQU5ZLFlBQVk7QUFXekIsSUFBYSxZQUFZLEdBQXpCLE1BQWEsWUFBWTtJQUV2QixTQUFTLENBQUUsS0FBVTtRQUVuQixPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDO0NBQ0YsQ0FBQTtBQU5ZLFlBQVk7SUFIeEIsSUFBSSxDQUFDO1FBQ0osSUFBSSxFQUFFLFVBQVU7S0FDakIsQ0FBQztHQUNXLFlBQVksQ0FNeEI7U0FOWSxZQUFZO0FBWXpCLElBQWEsV0FBVyxHQUF4QixNQUFhLFdBQVc7SUFFdEIsU0FBUyxDQUFFLEtBQVU7UUFFbkIsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUNGLENBQUE7QUFOWSxXQUFXO0lBSHZCLElBQUksQ0FBQztRQUNKLElBQUksRUFBRSxTQUFTO0tBQ2hCLENBQUM7R0FDVyxXQUFXLENBTXZCO1NBTlksV0FBVztBQVd4QixJQUFhLFlBQVksR0FBekIsTUFBYSxZQUFZO0lBRXZCLFNBQVMsQ0FBRSxLQUFVO1FBRW5CLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7Q0FDRixDQUFBO0FBTlksWUFBWTtJQUh4QixJQUFJLENBQUM7UUFDSixJQUFJLEVBQUUsVUFBVTtLQUNqQixDQUFDO0dBQ1csWUFBWSxDQU14QjtTQU5ZLFlBQVk7QUFZekIsSUFBYSxhQUFhLEdBQTFCLE1BQWEsYUFBYTtJQUV4QixTQUFTLENBQUUsS0FBVTtRQUVuQixPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7Q0FDRixDQUFBO0FBTlksYUFBYTtJQUh6QixJQUFJLENBQUM7UUFDSixJQUFJLEVBQUUsV0FBVztLQUNsQixDQUFDO0dBQ1csYUFBYSxDQU16QjtTQU5ZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtICB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIGlzTnVsbCxcclxuICBpc05pbCxcclxuICBpc1VuZGVmaW5lZCwgXHJcbiAgaXNGdW5jdGlvbixcclxuICBpc0FycmF5LFxyXG4gIGlzU3RyaW5nLFxyXG4gIGlzT2JqZWN0LFxyXG4gIGlzTnVtYmVyIFxyXG59IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNOdWxsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNOdWxsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gaXNOdWxsKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNVbmRlZmluZWQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc1VuZGVmaW5lZFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzVW5kZWZpbmVkKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNOaWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc05pbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzTmlsKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNGdW5jdGlvbidcclxufSlcclxuZXhwb3J0IGNsYXNzIElzRnVuY3Rpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtICh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNOdW1iZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc051bWJlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNTdHJpbmcnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc1N0cmluZ1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzQXJyYXknXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0FycmF5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSk7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzT2JqZWN0J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNPYmplY3RQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtICh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBpc09iamVjdCh2YWx1ZSk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdpc0RlZmluZWQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0RlZmluZWRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtICh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiAhaXNVbmRlZmluZWQodmFsdWUpO1xyXG4gIH1cclxufVxyXG5cclxuIl19