import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
let IsGreaterPipe = class IsGreaterPipe {
    transform(first, second) {
        return first > second;
    }
};
IsGreaterPipe = tslib_1.__decorate([
    Pipe({
        name: 'greater'
    })
], IsGreaterPipe);
export { IsGreaterPipe };
let IsGreaterOrEqualPipe = class IsGreaterOrEqualPipe {
    transform(first, second) {
        return first >= second;
    }
};
IsGreaterOrEqualPipe = tslib_1.__decorate([
    Pipe({
        name: 'greaterOrEqual'
    })
], IsGreaterOrEqualPipe);
export { IsGreaterOrEqualPipe };
let IsLessPipe = class IsLessPipe {
    transform(first, second) {
        return first < second;
    }
};
IsLessPipe = tslib_1.__decorate([
    Pipe({
        name: 'less'
    })
], IsLessPipe);
export { IsLessPipe };
let IsLessOrEqualPipe = class IsLessOrEqualPipe {
    transform(first, second) {
        return first <= second;
    }
};
IsLessOrEqualPipe = tslib_1.__decorate([
    Pipe({
        name: 'lessOrEqual'
    })
], IsLessOrEqualPipe);
export { IsLessOrEqualPipe };
let IsEqualPipe = class IsEqualPipe {
    transform(first, second) {
        return first == second;
    }
};
IsEqualPipe = tslib_1.__decorate([
    Pipe({
        name: 'equal'
    })
], IsEqualPipe);
export { IsEqualPipe };
let IsNotEqualPipe = class IsNotEqualPipe {
    transform(first, second) {
        return first != second;
    }
};
IsNotEqualPipe = tslib_1.__decorate([
    Pipe({
        name: 'notEqual'
    })
], IsNotEqualPipe);
export { IsNotEqualPipe };
let IsIdenticalPipe = class IsIdenticalPipe {
    transform(first, second) {
        return first === second;
    }
};
IsIdenticalPipe = tslib_1.__decorate([
    Pipe({
        name: 'identical'
    })
], IsIdenticalPipe);
export { IsIdenticalPipe };
let IsNotIdenticalPipe = class IsNotIdenticalPipe {
    transform(first, second) {
        return first !== second;
    }
};
IsNotIdenticalPipe = tslib_1.__decorate([
    Pipe({
        name: 'notIdentical'
    })
], IsNotIdenticalPipe);
export { IsNotIdenticalPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9ucy5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbImJvb2xlYW4vY29uZGl0aW9ucy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQU1wRCxJQUFhLGFBQWEsR0FBMUIsTUFBYSxhQUFhO0lBRXhCLFNBQVMsQ0FBRSxLQUFVLEVBQUUsTUFBVztRQUVoQyxPQUFPLEtBQUssR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztDQUNGLENBQUE7QUFOWSxhQUFhO0lBSHpCLElBQUksQ0FBQztRQUNKLElBQUksRUFBRSxTQUFTO0tBQ2hCLENBQUM7R0FDVyxhQUFhLENBTXpCO1NBTlksYUFBYTtBQVcxQixJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFvQjtJQUUvQixTQUFTLENBQUUsS0FBVSxFQUFFLE1BQVc7UUFFaEMsT0FBTyxLQUFLLElBQUksTUFBTSxDQUFDO0lBQ3pCLENBQUM7Q0FDRixDQUFBO0FBTlksb0JBQW9CO0lBSGhDLElBQUksQ0FBQztRQUNKLElBQUksRUFBRSxnQkFBZ0I7S0FDdkIsQ0FBQztHQUNXLG9CQUFvQixDQU1oQztTQU5ZLG9CQUFvQjtBQVdqQyxJQUFhLFVBQVUsR0FBdkIsTUFBYSxVQUFVO0lBRXJCLFNBQVMsQ0FBRSxLQUFVLEVBQUUsTUFBVztRQUVoQyxPQUFPLEtBQUssR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztDQUNGLENBQUE7QUFOWSxVQUFVO0lBSHRCLElBQUksQ0FBQztRQUNKLElBQUksRUFBRSxNQUFNO0tBQ2IsQ0FBQztHQUNXLFVBQVUsQ0FNdEI7U0FOWSxVQUFVO0FBV3ZCLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBRTVCLFNBQVMsQ0FBRSxLQUFVLEVBQUUsTUFBVztRQUVoQyxPQUFPLEtBQUssSUFBSSxNQUFNLENBQUM7SUFDekIsQ0FBQztDQUNGLENBQUE7QUFOWSxpQkFBaUI7SUFIN0IsSUFBSSxDQUFDO1FBQ0osSUFBSSxFQUFFLGFBQWE7S0FDcEIsQ0FBQztHQUNXLGlCQUFpQixDQU03QjtTQU5ZLGlCQUFpQjtBQVc5QixJQUFhLFdBQVcsR0FBeEIsTUFBYSxXQUFXO0lBRXRCLFNBQVMsQ0FBRSxLQUFVLEVBQUUsTUFBVztRQUNoQyxPQUFPLEtBQUssSUFBSSxNQUFNLENBQUM7SUFDekIsQ0FBQztDQUNGLENBQUE7QUFMWSxXQUFXO0lBSHZCLElBQUksQ0FBQztRQUNKLElBQUksRUFBRSxPQUFPO0tBQ2QsQ0FBQztHQUNXLFdBQVcsQ0FLdkI7U0FMWSxXQUFXO0FBVXhCLElBQWEsY0FBYyxHQUEzQixNQUFhLGNBQWM7SUFFekIsU0FBUyxDQUFFLEtBQVUsRUFBRSxNQUFXO1FBRWhDLE9BQU8sS0FBSyxJQUFJLE1BQU0sQ0FBQztJQUN6QixDQUFDO0NBQ0YsQ0FBQTtBQU5ZLGNBQWM7SUFIMUIsSUFBSSxDQUFDO1FBQ0osSUFBSSxFQUFFLFVBQVU7S0FDakIsQ0FBQztHQUNXLGNBQWMsQ0FNMUI7U0FOWSxjQUFjO0FBVzNCLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFFMUIsU0FBUyxDQUFFLEtBQVUsRUFBRSxNQUFXO1FBRWhDLE9BQU8sS0FBSyxLQUFLLE1BQU0sQ0FBQztJQUMxQixDQUFDO0NBQ0YsQ0FBQTtBQU5ZLGVBQWU7SUFIM0IsSUFBSSxDQUFDO1FBQ0osSUFBSSxFQUFFLFdBQVc7S0FDbEIsQ0FBQztHQUNXLGVBQWUsQ0FNM0I7U0FOWSxlQUFlO0FBVzVCLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBRTdCLFNBQVMsQ0FBRSxLQUFVLEVBQUUsTUFBVztRQUVoQyxPQUFPLEtBQUssS0FBSyxNQUFNLENBQUM7SUFDMUIsQ0FBQztDQUNGLENBQUE7QUFOWSxrQkFBa0I7SUFIOUIsSUFBSSxDQUFDO1FBQ0osSUFBSSxFQUFFLGNBQWM7S0FDckIsQ0FBQztHQUNXLGtCQUFrQixDQU05QjtTQU5ZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2dyZWF0ZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0dyZWF0ZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgPiBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2dyZWF0ZXJPckVxdWFsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNHcmVhdGVyT3JFcXVhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCA+PSBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2xlc3MnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0xlc3NQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgPCBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2xlc3NPckVxdWFsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNMZXNzT3JFcXVhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCA8PSBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2VxdWFsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNFcXVhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZmlyc3QgPT0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdub3RFcXVhbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIElzTm90RXF1YWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgIT0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdpZGVudGljYWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0lkZW50aWNhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCA9PT0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdub3RJZGVudGljYWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc05vdElkZW50aWNhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCAhPT0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuIl19