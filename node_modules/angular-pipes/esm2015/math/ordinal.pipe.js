import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { isNumberFinite } from '../utils/utils';
let OrdinalPipe = class OrdinalPipe {
    transform(input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        if (this.endsWithTenth(input)) {
            return input + 'th';
        }
        else {
            const cardinal = input.toString().charAt(input.toString().length - 1);
            switch (cardinal) {
                case '1':
                    return input + 'st';
                case '2':
                    return input + 'nd';
                case '3':
                    return input + 'rd';
                default:
                    return input + 'th';
            }
        }
    }
    endsWithTenth(input) {
        const beforeLastDigit = input.toString().charAt(input.toString().length - 2);
        return beforeLastDigit === '1';
    }
};
OrdinalPipe = tslib_1.__decorate([
    Pipe({
        name: 'ordinal'
    })
], OrdinalPipe);
export { OrdinalPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkaW5hbC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbIm1hdGgvb3JkaW5hbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFLaEQsSUFBYSxXQUFXLEdBQXhCLE1BQWEsV0FBVztJQUVwQixTQUFTLENBQUMsS0FBVTtRQUVoQixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzNCLE9BQU8sS0FBSyxHQUFHLElBQUksQ0FBQztTQUN2QjthQUFNO1lBQ0gsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRXRFLFFBQVEsUUFBUSxFQUFFO2dCQUNkLEtBQUssR0FBRztvQkFDSixPQUFPLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ3hCLEtBQUssR0FBRztvQkFDSixPQUFPLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ3hCLEtBQUssR0FBRztvQkFDSixPQUFPLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ3hCO29CQUNJLE9BQU8sS0FBSyxHQUFHLElBQUksQ0FBQzthQUMzQjtTQUNKO0lBQ0wsQ0FBQztJQUVPLGFBQWEsQ0FBQyxLQUFVO1FBQzVCLE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUU3RSxPQUFPLGVBQWUsS0FBSyxHQUFHLENBQUM7SUFDbkMsQ0FBQztDQUNKLENBQUE7QUEvQlksV0FBVztJQUh2QixJQUFJLENBQUM7UUFDRixJQUFJLEVBQUUsU0FBUztLQUNsQixDQUFDO0dBQ1csV0FBVyxDQStCdkI7U0EvQlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNOdW1iZXJGaW5pdGUgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgICBuYW1lOiAnb3JkaW5hbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIE9yZGluYWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gICAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xyXG5cclxuICAgICAgICBpZiAoIWlzTnVtYmVyRmluaXRlKGlucHV0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJ05hTic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5lbmRzV2l0aFRlbnRoKGlucHV0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgKyAndGgnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcmRpbmFsID0gaW5wdXQudG9TdHJpbmcoKS5jaGFyQXQoaW5wdXQudG9TdHJpbmcoKS5sZW5ndGggLSAxKTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoY2FyZGluYWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJzEnOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCArICdzdCc7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcyJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgKyAnbmQnO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnMyc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ICsgJ3JkJztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ICsgJ3RoJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gXHJcbiAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgcHJpdmF0ZSBlbmRzV2l0aFRlbnRoKGlucHV0OiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBiZWZvcmVMYXN0RGlnaXQgPSBpbnB1dC50b1N0cmluZygpLmNoYXJBdChpbnB1dC50b1N0cmluZygpLmxlbmd0aCAtIDIpO1xyXG5cclxuICAgICAgICByZXR1cm4gYmVmb3JlTGFzdERpZ2l0ID09PSAnMSc7XHJcbiAgICB9XHJcbn0iXX0=